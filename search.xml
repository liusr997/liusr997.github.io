<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>简易计算器</title>
      <link href="/2022/11/09/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
      <url>/2022/11/09/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>简易计算器</strong></p><p>只包括了加减乘除的运算</p><p>首先我们要从键盘获取数字和运算符，初始化</p><pre><code class="java">Scanner sc = new Scanner(System.in);System.out.println(&quot;请输入首位数字&quot;);double newNum;newNum = sc.nextDouble();</code></pre><p>然后我们要想的，当我输入第一位数字和第二位数字并进行运算后，得到的是第一对的运算结果 </p><p>再次进行运算时，进行操作的数值为第二位数字和第一对的运算结果进行运算，以此类推，在进行第一次运算后，每当我们再次进行运算后。拿取的值都为上一次运算结果的第二位数字和上一次的运算结果</p><p>所以，为了获取每一次的运算结果值，我们要在main函数的首部创建一个动态数组，用来存储数值</p><p>为了获取动态数组的每一个索引，我们创建一个变量</p><pre><code class="java">ArrayList&lt;Double&gt; numArr = new ArrayList&lt;&gt;();int count = 0;</code></pre><p>接下来获取键盘中的运算符,考虑到可能进行多次运算，我们设置一个循环，并定义退出条件</p><pre><code class="java">System.out.println(&quot;按e退出运算&quot;);    String cal;while(true)&#123;    System.out.println(&quot;请输入运算符&quot;);    cal = sc.next();    if(cal.equals(&quot;e&quot;))&#123;        System.exit(0);   &#125;else if(!cal.equals(&quot;+&quot;) &amp;&amp; !cal.equals(&quot;-&quot;) &amp;&amp; !cal.equals(&quot;*&quot;) &amp;&amp;! cal.equals(&quot;/&quot;))&#123;     System.out.println(&quot;运算符输入有误，请重新输入&quot;);      &#125;else&#123;        break;    &#125;&#125;</code></pre><p>获取参加运算的第二位数字,获取完对索引进行增加</p><pre><code class="java">double oldNum;    System.out.println(&quot;请输入第二位数字&quot;);    oldNum = sc.nexDouble();    count++;</code></pre><p>运算方法</p><pre><code class="java">   public static double add(double newNumber, double oldNumber) &#123;        return newNumber + oldNumber;    &#125;    public static double sub(double newNumber, double oldNumber) &#123;        return newNumber - oldNumber;    &#125;    public static double mul(double newNumber, double oldNumber) &#123;        return newNumber * oldNumber;    &#125;</code></pre><p>除数不能为0,对此进行判断</p><p>注意，如果我将分子输入了0，数值会返回0</p><p>这样的话是不合法的运算，然而我们也会将count自增，从而导致动态数组的索引值发生错乱</p><p>所以我们要返回第二位数字输入的位置，增加个判断</p><pre><code class="java"> public static double dev(double newNumber, double oldNumber) &#123;        if (oldNumber != 0) &#123;            return newNumber / oldNumber;        &#125; else &#123;            return 0;        &#125;    &#125;</code></pre><p>如果返回值为0，count不进行自增，并提示重输，直到运算为合法的</p><pre><code class="java">  while (true) &#123;                System.out.println(&quot;请输入数字&quot;);                oldNum = sc.nextDouble();                if (dev(newNum, oldNum) != 0) &#123;                    count++;                    break;                &#125; else &#123;                    System.out.println(&quot;数值输入有误,请重新输入&quot;);                &#125;            &#125;</code></pre><p>接下来判断符号并进行对结果的输出</p><p>if()判断是否为第一次进行运算</p><p>如果是将第一次的运算结果添加到动态数组中，方便之后运算的取值，此时的索引值为0</p><p>如果不是，要获取上一次的运算结果，也就是numArr[0]</p><p>由于我们每输入第二个数字后，count都会自增</p><p>所以我们第一次输出运算结果时的索引值为1，第二次及之后索引值必然时大于等于2 的</p><p>为了进行运算，要获取上一次结果的值，所以要使动态数组的索引值-2拿值</p><pre><code class="java">  switch (cal) &#123;                case &quot;+&quot; -&gt; &#123;                    if (count == 1) &#123;                        numArr.add(add(newNum, oldNum));                        System.out.println(&quot;结果为&quot; + add(newNum, oldNum));                    &#125; else &#123;                        numArr.add(add(numArr.get(count - 2), oldNum));                        System.out.println(&quot;结果为&quot; + add(numArr.get(count - 2), oldNum));                    &#125;                &#125;                case &quot;-&quot; -&gt; &#123;                    if (count == 1) &#123;                        numArr.add(sub(newNum, oldNum));                        System.out.println(&quot;结果为&quot; + sub(newNum, oldNum));                    &#125; else &#123;                        numArr.add(sub(numArr.get(count - 2), oldNum));                        System.out.println(&quot;结果为&quot; + sub(numArr.get(count - 2), oldNum));                    &#125;                &#125;                case &quot;*&quot; -&gt; &#123;                    if (count == 1) &#123;                        numArr.add(mul(newNum, oldNum));                        System.out.println(&quot;结果为&quot; + mul(newNum, oldNum));                    &#125; else &#123;                        numArr.add(mul(numArr.get(count - 2), oldNum));                        System.out.println(&quot;结果为&quot; + mul(numArr.get(count - 2), oldNum));                    &#125;                &#125;                case &quot;/&quot; -&gt; &#123;                    if (count == 1) &#123;                        numArr.add(dev(newNum, oldNum));                        System.out.println(&quot;结果为&quot; + dev(newNum, oldNum));                    &#125; else &#123;                        numArr.add(dev(numArr.get(count - 2), oldNum));                        System.out.println(&quot;结果为&quot; + dev(numArr.get(count - 2), oldNum));                    &#125;                &#125;            &#125;</code></pre><p>可能多次进行运算并输出结果，所以我们从输入符号的位置添加个循环</p><p>最终程序</p><pre><code class="java">    public static void main(String[] args) &#123;        ArrayList&lt;Double&gt; numArr = new ArrayList&lt;&gt;();        Scanner sc = new Scanner(System.in);        int count = 0;        double newNum;        System.out.println(&quot;按e退出&quot;);        System.out.println(&quot;请输入数字&quot;);        newNum = sc.nextDouble();                //多次进行运算        while (true) &#123;            String cal;            while (true) &#123;                System.out.println(&quot;请输入符号&quot;);                cal = sc.next();                if (cal.equals(&quot;e&quot;)) &#123;                    System.exit(0);                &#125; else if (!cal.equals(&quot;+&quot;) &amp;&amp; !cal.equals(&quot;-&quot;) &amp;&amp; !cal.equals(&quot;*&quot;) &amp;&amp; !cal.equals(&quot;/&quot;)) &#123;                    System.out.println(&quot;符号输入有误，请重新输入&quot;);                &#125; else &#123;                    break;                &#125;            &#125;            double oldNum;            while (true) &#123;                System.out.println(&quot;请输入数字&quot;);                oldNum = sc.nextDouble();                if (dev(newNum, oldNum) != 0) &#123;                    count++;                    break;                &#125; else &#123;                    System.out.println(&quot;有误&quot;);                &#125;            &#125;                        //运算并输出            switch (cal) &#123;                case &quot;+&quot; -&gt; &#123;                    if (count == 1) &#123;                        numArr.add(add(newNum, oldNum));                        System.out.println(&quot;结果为&quot; + add(newNum, oldNum));                    &#125; else &#123;                        numArr.add(add(numArr.get(count - 2), oldNum));                        System.out.println(&quot;结果为&quot; + add(numArr.get(count - 2), oldNum));                    &#125;                &#125;                case &quot;-&quot; -&gt; &#123;                    if (count == 1) &#123;                        numArr.add(sub(newNum, oldNum));                        System.out.println(&quot;结果为&quot; + sub(newNum, oldNum));                    &#125; else &#123;                        numArr.add(sub(numArr.get(count - 2), oldNum));                        System.out.println(&quot;结果为&quot; + sub(numArr.get(count - 2), oldNum));                    &#125;                &#125;                case &quot;*&quot; -&gt; &#123;                    if (count == 1) &#123;                        numArr.add(mul(newNum, oldNum));                        System.out.println(&quot;结果为&quot; + mul(newNum, oldNum));                    &#125; else &#123;                        numArr.add(mul(numArr.get(count - 2), oldNum));                        System.out.println(&quot;结果为&quot; + mul(numArr.get(count - 2), oldNum));                    &#125;                &#125;                case &quot;/&quot; -&gt; &#123;                    if (count == 1) &#123;                        numArr.add(dev(newNum, oldNum));                        System.out.println(&quot;结果为&quot; + dev(newNum, oldNum));                    &#125; else &#123;                        numArr.add(dev(numArr.get(count - 2), oldNum));                        System.out.println(&quot;结果为&quot; + dev(numArr.get(count - 2), oldNum));                    &#125;                &#125;            &#125;        &#125;    &#125;    //运算方法    public static double add(double newNumber, double oldNumber) &#123;        return newNumber + oldNumber;    &#125;    public static double sub(double newNumber, double oldNumber) &#123;        return newNumber - oldNumber;    &#125;    public static double mul(double newNumber, double oldNumber) &#123;        return newNumber * oldNumber;    &#125;    public static double dev(double newNumber, double oldNumber) &#123;        if (oldNumber != 0) &#123;            return newNumber / oldNumber;        &#125; else &#123;            return 0;        &#125;    &#125;</code></pre><p>如果我们要将输入数字位显示异常判断，自行添加if</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>articl</title>
      <link href="/2022/11/08/%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/11/08/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>这是一段文字，用来测试</strong></p><p>test</p><p>test</p><p>test</p><p>test</p><p>test</p><p>test</p><p>test</p><p>test</p><p>test</p><p>test</p><p>123456789</p><p>用来测试</p><p>！@#￥%……&amp;*（）—+&#x3D;-—__{}[]|?.&lt;&gt;;:”‘’~&#96;&#96;</p><pre><code class="java">System.out.println(&quot;我是人啊&quot;);int abc;String abc = &quot;111&quot;;for(;;)&#123;    &#125;while(true)&#123;    &#125;if()&#123;    &#125;else&#123;    &#125;do&#123;&#125;String str = new String();class abc extends def </code></pre><pre><code class="c">printf(&quot;我是人啊&quot;);int a ;while()&#123;    &#125;</code></pre><pre><code class="javascript">var abc ;class abc;document.querslector();@clickdata:aa</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/08/hello-world/"/>
      <url>/2022/11/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
